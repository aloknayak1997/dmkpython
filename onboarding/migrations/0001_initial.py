# Generated by Django 2.0.5 on 2018-07-10 08:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DpyUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True, unique=True)),
                ('middle_name', models.CharField(blank=True, max_length=75, null=True)),
                ('mobile', models.CharField(max_length=16, null=True, unique=True)),
                ('dob', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Other')], max_length=20)),
                ('blood_group', models.CharField(max_length=5, null=True)),
                ('religion', models.CharField(max_length=75, null=True)),
                ('caste', models.CharField(max_length=75, null=True)),
                ('mother_name', models.CharField(max_length=100, null=True)),
                ('nationality', models.CharField(max_length=75, null=True)),
                ('place_of_birth', models.CharField(max_length=75, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('address2', models.CharField(max_length=255, null=True)),
                ('image', models.ImageField(blank=True, default='emp_default.png', upload_to='')),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.IntegerField(default=0)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('updated_by', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'dpy_user',
                'verbose_name': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DpyInstitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('institute_email', models.EmailField(max_length=100, null=True)),
                ('institute_website', models.CharField(max_length=100, null=True)),
                ('demo_link', models.CharField(blank=True, max_length=100)),
                ('contact', models.CharField(max_length=12, null=True)),
                ('board', models.CharField(blank=True, max_length=100)),
                ('nature', models.PositiveSmallIntegerField()),
                ('logo', models.ImageField(blank=True, default='institute_logo.png', upload_to='')),
                ('institute_image', models.ImageField(blank=True, default='institue_default.png', upload_to='')),
                ('medium', models.PositiveSmallIntegerField()),
                ('university', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=20, null=True)),
                ('pin_code', models.IntegerField()),
                ('state', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.IntegerField(default=0)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('updated_by', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'dpy_institute',
                'verbose_name': 'Institute',
            },
        ),
        migrations.CreateModel(
            name='DpyInstituteUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField()),
                ('type', models.PositiveSmallIntegerField(default=0)),
                ('designation', models.CharField(max_length=100)),
                ('date_of_joining', models.DateField(null=True)),
                ('date_of_leaving', models.DateField(null=True)),
                ('is_active', models.PositiveSmallIntegerField(default=1)),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.IntegerField(default=0)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('updated_by', models.IntegerField(default=0)),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='onboarding.DpyInstitute')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dpy_institute_user',
                'verbose_name': 'Institute User',
            },
        ),
        # migrations.RunSQL("ALTER TABLE dpy_user CHANGE `gender` `gender` enum('male','female','other') NOT NULL AFTER `dob`"),
        migrations.RunSQL("ALTER TABLE dpy_user CHANGE `status` `status` tinyint(1) unsigned NOT NULL DEFAULT '1' AFTER `image`"),
        migrations.RunSQL("ALTER TABLE dpy_user CHANGE `created_on` `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `status`"),
        migrations.RunSQL("ALTER TABLE dpy_user CHANGE `updated_on` `updated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER `created_by`"),
        migrations.RunSQL("ALTER TABLE dpy_institute CHANGE `nature` `nature` tinyint(1) unsigned NOT NULL COMMENT '1:School,2:College,3:Other' AFTER `board`"),
        migrations.RunSQL("ALTER TABLE dpy_institute CHANGE `medium` `medium` tinyint(1) unsigned NOT NULL AFTER `institute_image`"),
        migrations.RunSQL("ALTER TABLE dpy_institute CHANGE `status` `status` tinyint(1) unsigned NOT NULL DEFAULT '1' AFTER `country`"),
        migrations.RunSQL("ALTER TABLE dpy_institute CHANGE `created_on` `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `status`"),
        migrations.RunSQL("ALTER TABLE dpy_institute CHANGE `updated_on` `updated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER `created_by`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `role` `role` tinyint(1) unsigned NOT NULL COMMENT '0:Owner, 1:Director/Dean/Principal, 2:HOD/Manager/Clerk, 3:Teacher, 4:Non-Teaching ,5:Office Associate, 6:House Keeping Staff, 7:Student' AFTER `id`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `type` `type` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '1:student,2:teacher' AFTER `role`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `is_active` `is_active` tinyint(1) unsigned NOT NULL DEFAULT '1' AFTER `date_of_leaving`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `status` `status` tinyint(1) unsigned NOT NULL DEFAULT '1' AFTER `is_active`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `created_on` `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `status`"),
        migrations.RunSQL("ALTER TABLE dpy_institute_user CHANGE `updated_on` `updated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER `created_by`"),        
    ]
